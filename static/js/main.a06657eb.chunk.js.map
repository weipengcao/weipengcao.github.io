{"version":3,"sources":["components/navigation/navigation.js","components/dropdown-menu/dropdown-menu.js","components/top-bar/top-bar.js","components/about-me/about-me.js","components/main-content/main-content.js","components/app/app.js","serviceWorker.js","components/app/app.redux.js","components/index.js","store.js","index.js"],"names":["Navigation","style","width","height","background","DropdownMenu","title","link","children","class","className","href","TopBar","AboutMe","animation","MainContent","path","App","display","Boolean","window","location","hostname","match","initalState","initialized","rootReducers","app","state","action","type","store","createStore","combineReducers","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUAWaA,EATO,WAElB,OACE,yBAAKC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAOC,WAAY,aC+C5CC,G,MA9BS,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAEpC,OACE,yBAAKC,MAAM,YACT,yBAAKC,UAAU,6BACb,yBAAKA,UAAU,mBACXH,GACA,uBAAGI,KAAOJ,GACR,0BAAMG,UAAU,yBACdJ,KAIHC,GACD,0BAAMG,UAAU,yBACZJ,KAKRE,GACA,wBAAIE,UAAU,oBACVF,MCfCI,G,MAxBG,WAEd,OACE,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,gBASb,kBAACL,EAAD,CAAcC,MAAM,QAAQC,KAAK,gBAGrC,yBAAKG,UAAU,WACf,yBAAKA,UAAU,mB,OCJRG,G,YAjBI,WACf,OACE,6BACE,wBAAIH,UAAU,yBAAd,iDAGA,wBAAIA,UAAU,eACZT,MAAO,CACLa,UAAW,qCAFf,mCCYOC,EAfQ,WACnB,OACE,yBAAKL,UAAU,0BACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,KAAK,KACV,kBAACH,EAAD,OAEF,kBAAC,IAAD,CAAOG,KAAK,aACV,kBAACH,EAAD,UCcGI,G,MAnBA,WAEX,OACE,yBAAKP,UAAU,OACb,yBAAKA,UAAU,gBAAgBT,MAAO,CAAEiB,QAAS,SAC/C,kBAAClB,EAAD,OAEF,yBAAKU,UAAU,6BACb,yBAAKA,UAAU,qBACb,kBAACE,EAAD,OAEF,yBAAKF,UAAU,kBACb,kBAACK,EAAD,WCTUI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBChBOC,EAAc,CACzBC,aAAa,GCGFC,EAAgB,CAC3BC,IDDa,WAAmC,IAAlCC,EAAiC,uDAA3BJ,EAAaK,EAAc,uDAAP,GAKxC,OAJOA,EAAOC,KAIPF,IEIMG,EAPDC,YACZC,YAAgBP,GAChBQ,YACEC,MCEJC,IAASC,OAEL,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUN,MAAQA,GAChB,kBAACd,EAAD,QAINqB,SAASC,eAAe,SJ4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a06657eb.chunk.js","sourcesContent":["import React from 'react';\n\nconst _Navigation = () => {\n  \n  return (\n    <div style={{ width: 300, height: 10000, background: 'silver' }}>\n\n    </div>\n  );\n}\n\nexport const Navigation = _Navigation;\n","import React from 'react';\n\nimport './dropdown-menu.css';\n\n\nconst _DropdownMenuItem = ({ text, link }) => {\n  return (\n    <li>\n      { link && (\n        <a href={ link }>\n          <p className='menu-lable'>{ text }</p>\n        </a>\n      ) }\n      { !link && (\n        <p className='menu-lable'>{ text }</p>\n      ) }\n    </li>\n  );\n};\n\nexport const DropdownMenuItem = _DropdownMenuItem;\n\nconst _DropdownMenu = ({ title, link, children }) => {\n  \n  return (\n    <div class=\"dropdown\">\n      <div className='dropdown-button-container'>\n        <div className='dropdown-button'>\n          { link && (\n            <a href={ link }>\n              <span className='dropdown-button-label'>\n              { title }\n            </span>\n            </a>\n          ) }\n          { !link && (\n            <span className='dropdown-button-label'>\n              { title }\n            </span>\n          ) }\n        </div>\n      </div>\n      { children && (\n        <ul className=\"dropdown-content\">\n          { children }\n        </ul>\n      ) }\n      \n    </div>\n  );\n};\n\nexport const DropdownMenu = _DropdownMenu;\n","import React from 'react';\nimport { DropdownMenu, DropdownMenuItem } from '../dropdown-menu';\n\nimport './top-bar.css';\n\nconst _TopBar = () => {\n  \n  return (\n    <div className='top-bar-root'>\n      <div className='centerContainer top-bar-left'>\n        <div className='app-logo' />\n        <div className='top-bar-menu'>\n          {/*\n          <DropdownMenu title='App'>\n            <DropdownMenuItem text='No Item' link='/no-item' />\n          </DropdownMenu>\n          <DropdownMenu title='Support'>\n            <DropdownMenuItem text='No Item' link='/no-item' />\n          </DropdownMenu>\n          */}\n          <DropdownMenu title='About' link='/about-me'/>\n        </div>\n      </div>\n      <div className='spacer'/>\n      <div className='topbarRight'></div>\n    </div>\n  );\n}\n\nexport const TopBar = _TopBar;\n","import React from 'react';\nimport './about-me.css';\n\nconst _AboutMe = () => {\n  return (\n    <div>\n      <h2 className='blink_me warning-text'>\n        Don't use ReactJS to create a blog webpage!!!\n      </h2>\n      <h2 className='warning-text'\n        style={{\n          animation: 'blinker 1s linear 250ms infinite'\n        }}\n      >\n        Don't use use Redux tooooooo\n      </h2>\n    </div>\n  );\n}\n\nexport const AboutMe = _AboutMe;\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport './main-content.css';\n\nimport { AboutMe } from '../about-me';\n\nconst _MainContent = () => {\n  return (\n    <div className='main-content-container'>\n      <Switch>\n        <Route path='/'>\n          <AboutMe />\n        </Route>\n        <Route path='/about-me'>\n          <AboutMe />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport const MainContent = _MainContent;\n","import React from 'react';\n//import { useSelector } from 'react-redux';\n\nimport { Navigation } from '../navigation';\nimport { TopBar } from '../top-bar';\nimport { MainContent } from '../main-content';\n\nimport './app.css';\n\nconst _App = () => {\n  //const appState = useSelector(state => state);\n  return (\n    <div className=\"App\">\n      <div className='nav-container' style={{ display: 'none' }}>\n        <Navigation />\n      </div>\n      <div className='vContainer main-container'>\n        <div className='top-bar-container'>\n          <TopBar />\n        </div>\n        <div className='main-container'>\n          <MainContent />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport const App = _App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\n\nexport const initalState = {\n  initialized: false,\n};\n\nexport default (state=initalState, action={}) => {\n  switch(action.type) {\n    default:\n      break;\n  }\n  return state;\n}","import app, { initalState as appInitialState } from './app/app.redux';\n\nexport const initalState = {\n  //app: appInitialState,\n};\n\nexport const rootReducers = ({\n  app\n});","import thunkMiddleware from 'redux-thunk';\nimport {\n  createStore,\n  combineReducers,\n  applyMiddleware\n} from 'redux';\nimport { rootReducers } from './components';\n\nconst store = createStore(\n  combineReducers(rootReducers),\n  applyMiddleware(\n    thunkMiddleware\n  )\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n} from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nimport store from './store';\n\nReactDOM.render(\n  (\n    <Router>\n      <Provider store={ store }>\n        <App />\n      </Provider>\n    </Router>\n  ),\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}